import 'jsr:@supabase/functions-js/edge-runtime.d.ts';
import { createClient } from 'npm:@supabase/supabase-js@2.49.1';

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY');
const REVIEW_TEAM_EMAIL = Deno.env.get('REVIEW_TEAM_EMAIL') || 'reviews@essayai.com';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  try {
    if (req.method === 'OPTIONS') {
      return new Response(null, { status: 200, headers: corsHeaders });
    }

    if (req.method !== 'POST') {
      return new Response('Method not allowed', { status: 405, headers: corsHeaders });
    }

    const { record } = await req.json();
    
    if (!record) {
      console.error('No record provided in webhook payload');
      return new Response('No record provided', { status: 400, headers: corsHeaders });
    }

    console.log('Processing review notification for:', record.id);

    // Fetch the essay and user details
    const { data: essay, error: essayError } = await supabase
      .from('essays')
      .select(`
        *,
        user_profiles!inner(full_name, user_id)
      `)
      .eq('id', record.essay_id)
      .single();

    if (essayError || !essay) {
      console.error('Error fetching essay:', essayError);
      return new Response('Essay not found', { status: 404, headers: corsHeaders });
    }

    // Get user email from auth.users
    const { data: { user }, error: userError } = await supabase.auth.admin.getUserById(essay.user_profiles.user_id);
    
    if (userError || !user) {
      console.error('Error fetching user:', userError);
      return new Response('User not found', { status: 404, headers: corsHeaders });
    }

    // Send email notification using Resend
    if (!RESEND_API_KEY) {
      console.error('RESEND_API_KEY not configured');
      return new Response('Email service not configured', { status: 500, headers: corsHeaders });
    }

    const emailData = {
      from: 'Splennet <noreply@splennet.com>',
      to: [REVIEW_TEAM_EMAIL],
      subject: `New Essay Review Request - ${essay.school}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">New Essay Review Request</h2>
          
          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0;">Student Information</h3>
            <p><strong>Name:</strong> ${essay.user_profiles.full_name}</p>
            <p><strong>Email:</strong> ${user.email}</p>
            <p><strong>Submitted:</strong> ${new Date(record.created_at).toLocaleString()}</p>
          </div>

          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0;">Essay Details</h3>
            <p><strong>School:</strong> ${essay.school}</p>
            <p><strong>Word Count:</strong> ${essay.generated_essay.split(' ').length} words</p>
            <p><strong>Prompt:</strong></p>
            <p style="font-style: italic; margin-left: 20px;">"${essay.prompt}"</p>
          </div>

          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0;">Review Instructions</h3>
            <p>${record.reviewer_instructions || 'No specific instructions provided.'}</p>
          </div>

          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0;">Essay Content</h3>
            <div style="white-space: pre-wrap; line-height: 1.6; font-size: 14px; border-left: 4px solid #2563eb; padding-left: 16px;">
${essay.generated_essay}
            </div>
          </div>

          <div style="background: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="margin: 0; color: #92400e;">
              <strong>Action Required:</strong> Please review this essay and provide feedback within 48 hours.
            </p>
          </div>

          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
          <p style="color: #6b7280; font-size: 12px;">
            This email was automatically generated by Splennet. Review ID: ${record.id}
          </p>
        </div>
      `,
    };

    const emailResponse = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(emailData),
    });

    if (!emailResponse.ok) {
      const errorText = await emailResponse.text();
      console.error('Failed to send email:', errorText);
      return new Response('Failed to send email notification', { status: 500, headers: corsHeaders });
    }

    const emailResult = await emailResponse.json();
    console.log('Email sent successfully:', emailResult.id);

    return new Response(
      JSON.stringify({ success: true, emailId: emailResult.id }),
      { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in send-review-notification function:', error);
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});